Terminals unused in grammar

   LABELNAME
   DELIM
   QUOTE
   EOFF


State 1 conflicts: 1 shift/reduce
State 45 conflicts: 3 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: /* empty */
    2        | commands

    3 commands: commands command
    4         | command

    5 command: decl
    6        | action
    7        | control

    8 decl: decl_func
    9     | decl_var
   10     | decl_ref
   11     | decl_label

   12 type: STRING
   13     | INTEGER

   14 decl_var: namelist COLON STRING SEMICOLON
   15         | namelist COLON INTEGER SEMICOLON

   16 namelist: namelist COMA NAME
   17         | NAME

   18 decl_ref: NAME REF NAME COLON type SEMICOLON

   19 decl_label: LABEL NAME SEMICOLON

   20 decl_func: NAME COLON type OBRACE chain_param CBRACE func_block

   21 chain_param: decl_list namelist COLON type

   22 decl_list: decl_list decl_var
   23          | decl_var

   24 block: BLOCK commands KCOLB

   25 func_block: BLOCK commands RETURN expr SEMICOLON KCOLB

   26 action: assign
   27       | io
   28       | goto

   29 assign: NAME ASSIGN expr SEMICOLON

   30 io: READ OBRACE NAME CBRACE SEMICOLON
   31   | WRITE OBRACE NAME CBRACE SEMICOLON
   32   | WRITE OBRACE NUMBER CBRACE SEMICOLON

   33 goto: GOTO NAME SEMICOLON

   34 expr: string_expr
   35     | int_expr

   36 int_expr: int_expr MUL int_expr
   37         | int_expr DIV int_expr
   38         | int_expr ADD int_expr
   39         | int_expr SUB int_expr
   40         | int_expr AND int_expr
   41         | int_expr OR int_expr
   42         | int_expr LT int_expr
   43         | int_expr LE int_expr
   44         | int_expr GT int_expr
   45         | int_expr GE int_expr
   46         | int_expr EQ int_expr
   47         | int_expr NE int_expr
   48         | NOT int_expr
   49         | OBRACE int_expr CBRACE
   50         | NUMBER
   51         | NAME

   52 string_expr: string_expr ADD string_factor
   53            | string_factor

   54 string_factor: OBRACE string_factor CBRACE
   55              | STRINGCONST
   56              | STRINGCONST RECOPENBRACE int_expr RECCLOSEBRACE
   57              | NAME
   58              | NAME RECOPENBRACE int_expr RECCLOSEBRACE

   59 control: cond
   60        | cycle

   61 $@1: /* empty */

   62 $@2: /* empty */

   63 cond: IF int_expr $@1 THEN block $@2 ELSE block

   64 cycle: WHILE int_expr LOOP commands POOL


Terminals, with rules where they appear

$end (0) 0
error (256)
NUMBER (258) 32 50
NAME (259) 16 17 18 19 20 29 30 31 33 51 57 58
LABELNAME (260)
REF (261) 18
COLON (262) 14 15 18 20 21
SEMICOLON (263) 14 15 18 19 25 29 30 31 32 33
DELIM (264)
STRINGCONST (265) 55 56
QUOTE (266)
STRING (267) 12 14
INTEGER (268) 13 15
COMA (269) 16
RETURN (270) 25
ASSIGN (271) 29
IF (272) 63
WHILE (273) 64
LOOP (274) 64
POOL (275) 64
READ (276) 30
WRITE (277) 31 32
EOFF (278)
LABEL (279) 19
RECOPENBRACE (280) 56 58
RECCLOSEBRACE (281) 56 58
BLOCK (282) 24 25
KCOLB (283) 24 25
THEN (284) 63
ELSE (285) 63
GOTO (286) 33
OBRACE (287) 20 30 31 32 49 54
CBRACE (288) 20 30 31 32 49 54
OR (289) 41
AND (290) 40
NOT (291) 48
NE (292) 47
EQ (293) 46
GE (294) 45
LE (295) 43
GT (296) 44
LT (297) 42
SUB (298) 39
ADD (299) 38 52
DIV (300) 37
MUL (301) 36


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1 2, on right: 0
commands (49)
    on left: 3 4, on right: 2 3 24 25 64
command (50)
    on left: 5 6 7, on right: 3 4
decl (51)
    on left: 8 9 10 11, on right: 5
type (52)
    on left: 12 13, on right: 18 20 21
decl_var (53)
    on left: 14 15, on right: 9 22 23
namelist (54)
    on left: 16 17, on right: 14 15 16 21
decl_ref (55)
    on left: 18, on right: 10
decl_label (56)
    on left: 19, on right: 11
decl_func (57)
    on left: 20, on right: 8
chain_param (58)
    on left: 21, on right: 20
decl_list (59)
    on left: 22 23, on right: 21 22
block (60)
    on left: 24, on right: 63
func_block (61)
    on left: 25, on right: 20
action (62)
    on left: 26 27 28, on right: 6
assign (63)
    on left: 29, on right: 26
io (64)
    on left: 30 31 32, on right: 27
goto (65)
    on left: 33, on right: 28
expr (66)
    on left: 34 35, on right: 25 29
int_expr (67)
    on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51, on right:
    35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 56 58 63 64
string_expr (68)
    on left: 52 53, on right: 34 52
string_factor (69)
    on left: 54 55 56 57 58, on right: 52 53 54
control (70)
    on left: 59 60, on right: 7
cond (71)
    on left: 63, on right: 59
$@1 (72)
    on left: 61, on right: 63
$@2 (73)
    on left: 62, on right: 63
cycle (74)
    on left: 64, on right: 60


state 0

    0 $accept: . program $end

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    $default  reduce using rule 1 (program)

    program     go to state 8
    commands    go to state 9
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 1

   17 namelist: NAME .
   18 decl_ref: NAME . REF NAME COLON type SEMICOLON
   20 decl_func: NAME . COLON type OBRACE chain_param CBRACE func_block
   29 assign: NAME . ASSIGN expr SEMICOLON

    REF     shift, and go to state 24
    COLON   shift, and go to state 25
    ASSIGN  shift, and go to state 26

    COLON     [reduce using rule 17 (namelist)]
    $default  reduce using rule 17 (namelist)


state 2

   63 cond: IF . int_expr $@1 THEN block $@2 ELSE block

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 31


state 3

   64 cycle: WHILE . int_expr LOOP commands POOL

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 32


state 4

   30 io: READ . OBRACE NAME CBRACE SEMICOLON

    OBRACE  shift, and go to state 33


state 5

   31 io: WRITE . OBRACE NAME CBRACE SEMICOLON
   32   | WRITE . OBRACE NUMBER CBRACE SEMICOLON

    OBRACE  shift, and go to state 34


state 6

   19 decl_label: LABEL . NAME SEMICOLON

    NAME  shift, and go to state 35


state 7

   33 goto: GOTO . NAME SEMICOLON

    NAME  shift, and go to state 36


state 8

    0 $accept: program . $end

    $end  shift, and go to state 37


state 9

    2 program: commands .
    3 commands: commands . command

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    $default  reduce using rule 2 (program)

    command     go to state 38
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 10

    4 commands: command .

    $default  reduce using rule 4 (commands)


state 11

    5 command: decl .

    $default  reduce using rule 5 (command)


state 12

    9 decl: decl_var .

    $default  reduce using rule 9 (decl)


state 13

   14 decl_var: namelist . COLON STRING SEMICOLON
   15         | namelist . COLON INTEGER SEMICOLON
   16 namelist: namelist . COMA NAME

    COLON  shift, and go to state 39
    COMA   shift, and go to state 40


state 14

   10 decl: decl_ref .

    $default  reduce using rule 10 (decl)


state 15

   11 decl: decl_label .

    $default  reduce using rule 11 (decl)


state 16

    8 decl: decl_func .

    $default  reduce using rule 8 (decl)


state 17

    6 command: action .

    $default  reduce using rule 6 (command)


state 18

   26 action: assign .

    $default  reduce using rule 26 (action)


state 19

   27 action: io .

    $default  reduce using rule 27 (action)


state 20

   28 action: goto .

    $default  reduce using rule 28 (action)


state 21

    7 command: control .

    $default  reduce using rule 7 (command)


state 22

   59 control: cond .

    $default  reduce using rule 59 (control)


state 23

   60 control: cycle .

    $default  reduce using rule 60 (control)


state 24

   18 decl_ref: NAME REF . NAME COLON type SEMICOLON

    NAME  shift, and go to state 41


state 25

   20 decl_func: NAME COLON . type OBRACE chain_param CBRACE func_block

    STRING   shift, and go to state 42
    INTEGER  shift, and go to state 43

    type  go to state 44


state 26

   29 assign: NAME ASSIGN . expr SEMICOLON

    NUMBER       shift, and go to state 27
    NAME         shift, and go to state 45
    STRINGCONST  shift, and go to state 46
    OBRACE       shift, and go to state 47
    NOT          shift, and go to state 30

    expr           go to state 48
    int_expr       go to state 49
    string_expr    go to state 50
    string_factor  go to state 51


state 27

   50 int_expr: NUMBER .

    $default  reduce using rule 50 (int_expr)


state 28

   51 int_expr: NAME .

    $default  reduce using rule 51 (int_expr)


state 29

   49 int_expr: OBRACE . int_expr CBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 52


state 30

   48 int_expr: NOT . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 53


state 31

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr
   63 cond: IF int_expr . $@1 THEN block $@2 ELSE block

    OR   shift, and go to state 54
    AND  shift, and go to state 55
    NE   shift, and go to state 56
    EQ   shift, and go to state 57
    GE   shift, and go to state 58
    LE   shift, and go to state 59
    GT   shift, and go to state 60
    LT   shift, and go to state 61
    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 61 ($@1)

    $@1  go to state 66


state 32

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr
   64 cycle: WHILE int_expr . LOOP commands POOL

    LOOP  shift, and go to state 67
    OR    shift, and go to state 54
    AND   shift, and go to state 55
    NE    shift, and go to state 56
    EQ    shift, and go to state 57
    GE    shift, and go to state 58
    LE    shift, and go to state 59
    GT    shift, and go to state 60
    LT    shift, and go to state 61
    SUB   shift, and go to state 62
    ADD   shift, and go to state 63
    DIV   shift, and go to state 64
    MUL   shift, and go to state 65


state 33

   30 io: READ OBRACE . NAME CBRACE SEMICOLON

    NAME  shift, and go to state 68


state 34

   31 io: WRITE OBRACE . NAME CBRACE SEMICOLON
   32   | WRITE OBRACE . NUMBER CBRACE SEMICOLON

    NUMBER  shift, and go to state 69
    NAME    shift, and go to state 70


state 35

   19 decl_label: LABEL NAME . SEMICOLON

    SEMICOLON  shift, and go to state 71


state 36

   33 goto: GOTO NAME . SEMICOLON

    SEMICOLON  shift, and go to state 72


state 37

    0 $accept: program $end .

    $default  accept


state 38

    3 commands: commands command .

    $default  reduce using rule 3 (commands)


state 39

   14 decl_var: namelist COLON . STRING SEMICOLON
   15         | namelist COLON . INTEGER SEMICOLON

    STRING   shift, and go to state 73
    INTEGER  shift, and go to state 74


state 40

   16 namelist: namelist COMA . NAME

    NAME  shift, and go to state 75


state 41

   18 decl_ref: NAME REF NAME . COLON type SEMICOLON

    COLON  shift, and go to state 76


state 42

   12 type: STRING .

    $default  reduce using rule 12 (type)


state 43

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


state 44

   20 decl_func: NAME COLON type . OBRACE chain_param CBRACE func_block

    OBRACE  shift, and go to state 77


state 45

   51 int_expr: NAME .
   57 string_factor: NAME .
   58              | NAME . RECOPENBRACE int_expr RECCLOSEBRACE

    RECOPENBRACE  shift, and go to state 78

    SEMICOLON  reduce using rule 51 (int_expr)
    SEMICOLON  [reduce using rule 57 (string_factor)]
    CBRACE     reduce using rule 51 (int_expr)
    CBRACE     [reduce using rule 57 (string_factor)]
    ADD        reduce using rule 51 (int_expr)
    ADD        [reduce using rule 57 (string_factor)]
    $default   reduce using rule 51 (int_expr)


state 46

   55 string_factor: STRINGCONST .
   56              | STRINGCONST . RECOPENBRACE int_expr RECCLOSEBRACE

    RECOPENBRACE  shift, and go to state 79

    $default  reduce using rule 55 (string_factor)


state 47

   49 int_expr: OBRACE . int_expr CBRACE
   54 string_factor: OBRACE . string_factor CBRACE

    NUMBER       shift, and go to state 27
    NAME         shift, and go to state 45
    STRINGCONST  shift, and go to state 46
    OBRACE       shift, and go to state 47
    NOT          shift, and go to state 30

    int_expr       go to state 52
    string_factor  go to state 80


state 48

   29 assign: NAME ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 81


state 49

   35 expr: int_expr .
   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    OR   shift, and go to state 54
    AND  shift, and go to state 55
    NE   shift, and go to state 56
    EQ   shift, and go to state 57
    GE   shift, and go to state 58
    LE   shift, and go to state 59
    GT   shift, and go to state 60
    LT   shift, and go to state 61
    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 35 (expr)


state 50

   34 expr: string_expr .
   52 string_expr: string_expr . ADD string_factor

    ADD  shift, and go to state 82

    $default  reduce using rule 34 (expr)


state 51

   53 string_expr: string_factor .

    $default  reduce using rule 53 (string_expr)


state 52

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr
   49         | OBRACE int_expr . CBRACE

    CBRACE  shift, and go to state 83
    OR      shift, and go to state 54
    AND     shift, and go to state 55
    NE      shift, and go to state 56
    EQ      shift, and go to state 57
    GE      shift, and go to state 58
    LE      shift, and go to state 59
    GT      shift, and go to state 60
    LT      shift, and go to state 61
    SUB     shift, and go to state 62
    ADD     shift, and go to state 63
    DIV     shift, and go to state 64
    MUL     shift, and go to state 65


state 53

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr
   48         | NOT int_expr .

    NE   shift, and go to state 56
    EQ   shift, and go to state 57
    GE   shift, and go to state 58
    LE   shift, and go to state 59
    GT   shift, and go to state 60
    LT   shift, and go to state 61
    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 48 (int_expr)


state 54

   41 int_expr: int_expr OR . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 84


state 55

   40 int_expr: int_expr AND . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 85


state 56

   47 int_expr: int_expr NE . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 86


state 57

   46 int_expr: int_expr EQ . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 87


state 58

   45 int_expr: int_expr GE . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 88


state 59

   43 int_expr: int_expr LE . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 89


state 60

   44 int_expr: int_expr GT . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 90


state 61

   42 int_expr: int_expr LT . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 91


state 62

   39 int_expr: int_expr SUB . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 92


state 63

   38 int_expr: int_expr ADD . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 93


state 64

   37 int_expr: int_expr DIV . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 94


state 65

   36 int_expr: int_expr MUL . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 95


state 66

   63 cond: IF int_expr $@1 . THEN block $@2 ELSE block

    THEN  shift, and go to state 96


state 67

   64 cycle: WHILE int_expr LOOP . commands POOL

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    commands    go to state 97
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 68

   30 io: READ OBRACE NAME . CBRACE SEMICOLON

    CBRACE  shift, and go to state 98


state 69

   32 io: WRITE OBRACE NUMBER . CBRACE SEMICOLON

    CBRACE  shift, and go to state 99


state 70

   31 io: WRITE OBRACE NAME . CBRACE SEMICOLON

    CBRACE  shift, and go to state 100


state 71

   19 decl_label: LABEL NAME SEMICOLON .

    $default  reduce using rule 19 (decl_label)


state 72

   33 goto: GOTO NAME SEMICOLON .

    $default  reduce using rule 33 (goto)


state 73

   14 decl_var: namelist COLON STRING . SEMICOLON

    SEMICOLON  shift, and go to state 101


state 74

   15 decl_var: namelist COLON INTEGER . SEMICOLON

    SEMICOLON  shift, and go to state 102


state 75

   16 namelist: namelist COMA NAME .

    $default  reduce using rule 16 (namelist)


state 76

   18 decl_ref: NAME REF NAME COLON . type SEMICOLON

    STRING   shift, and go to state 42
    INTEGER  shift, and go to state 43

    type  go to state 103


state 77

   20 decl_func: NAME COLON type OBRACE . chain_param CBRACE func_block

    NAME  shift, and go to state 104

    decl_var     go to state 105
    namelist     go to state 13
    chain_param  go to state 106
    decl_list    go to state 107


state 78

   58 string_factor: NAME RECOPENBRACE . int_expr RECCLOSEBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 108


state 79

   56 string_factor: STRINGCONST RECOPENBRACE . int_expr RECCLOSEBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    OBRACE  shift, and go to state 29
    NOT     shift, and go to state 30

    int_expr  go to state 109


state 80

   54 string_factor: OBRACE string_factor . CBRACE

    CBRACE  shift, and go to state 110


state 81

   29 assign: NAME ASSIGN expr SEMICOLON .

    $default  reduce using rule 29 (assign)


state 82

   52 string_expr: string_expr ADD . string_factor

    NAME         shift, and go to state 111
    STRINGCONST  shift, and go to state 46
    OBRACE       shift, and go to state 112

    string_factor  go to state 113


state 83

   49 int_expr: OBRACE int_expr CBRACE .

    $default  reduce using rule 49 (int_expr)


state 84

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   41         | int_expr OR int_expr .
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    NE   shift, and go to state 56
    EQ   shift, and go to state 57
    GE   shift, and go to state 58
    LE   shift, and go to state 59
    GT   shift, and go to state 60
    LT   shift, and go to state 61
    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 41 (int_expr)


state 85

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   40         | int_expr AND int_expr .
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    NE   shift, and go to state 56
    EQ   shift, and go to state 57
    GE   shift, and go to state 58
    LE   shift, and go to state 59
    GT   shift, and go to state 60
    LT   shift, and go to state 61
    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 40 (int_expr)


state 86

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr
   47         | int_expr NE int_expr .

    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 47 (int_expr)


state 87

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   46         | int_expr EQ int_expr .
   47         | int_expr . NE int_expr

    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 46 (int_expr)


state 88

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   45         | int_expr GE int_expr .
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 45 (int_expr)


state 89

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   43         | int_expr LE int_expr .
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 43 (int_expr)


state 90

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   44         | int_expr GT int_expr .
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 44 (int_expr)


state 91

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   42         | int_expr LT int_expr .
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    SUB  shift, and go to state 62
    ADD  shift, and go to state 63
    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 42 (int_expr)


state 92

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   39         | int_expr SUB int_expr .
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 39 (int_expr)


state 93

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   38         | int_expr ADD int_expr .
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    DIV  shift, and go to state 64
    MUL  shift, and go to state 65

    $default  reduce using rule 38 (int_expr)


state 94

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   37         | int_expr DIV int_expr .
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    $default  reduce using rule 37 (int_expr)


state 95

   36 int_expr: int_expr . MUL int_expr
   36         | int_expr MUL int_expr .
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr

    $default  reduce using rule 36 (int_expr)


state 96

   63 cond: IF int_expr $@1 THEN . block $@2 ELSE block

    BLOCK  shift, and go to state 114

    block  go to state 115


state 97

    3 commands: commands . command
   64 cycle: WHILE int_expr LOOP commands . POOL

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    POOL   shift, and go to state 116
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    command     go to state 38
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 98

   30 io: READ OBRACE NAME CBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 117


state 99

   32 io: WRITE OBRACE NUMBER CBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 118


state 100

   31 io: WRITE OBRACE NAME CBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 119


state 101

   14 decl_var: namelist COLON STRING SEMICOLON .

    $default  reduce using rule 14 (decl_var)


state 102

   15 decl_var: namelist COLON INTEGER SEMICOLON .

    $default  reduce using rule 15 (decl_var)


state 103

   18 decl_ref: NAME REF NAME COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 120


state 104

   17 namelist: NAME .

    $default  reduce using rule 17 (namelist)


state 105

   23 decl_list: decl_var .

    $default  reduce using rule 23 (decl_list)


state 106

   20 decl_func: NAME COLON type OBRACE chain_param . CBRACE func_block

    CBRACE  shift, and go to state 121


state 107

   21 chain_param: decl_list . namelist COLON type
   22 decl_list: decl_list . decl_var

    NAME  shift, and go to state 104

    decl_var  go to state 122
    namelist  go to state 123


state 108

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr
   58 string_factor: NAME RECOPENBRACE int_expr . RECCLOSEBRACE

    RECCLOSEBRACE  shift, and go to state 124
    OR             shift, and go to state 54
    AND            shift, and go to state 55
    NE             shift, and go to state 56
    EQ             shift, and go to state 57
    GE             shift, and go to state 58
    LE             shift, and go to state 59
    GT             shift, and go to state 60
    LT             shift, and go to state 61
    SUB            shift, and go to state 62
    ADD            shift, and go to state 63
    DIV            shift, and go to state 64
    MUL            shift, and go to state 65


state 109

   36 int_expr: int_expr . MUL int_expr
   37         | int_expr . DIV int_expr
   38         | int_expr . ADD int_expr
   39         | int_expr . SUB int_expr
   40         | int_expr . AND int_expr
   41         | int_expr . OR int_expr
   42         | int_expr . LT int_expr
   43         | int_expr . LE int_expr
   44         | int_expr . GT int_expr
   45         | int_expr . GE int_expr
   46         | int_expr . EQ int_expr
   47         | int_expr . NE int_expr
   56 string_factor: STRINGCONST RECOPENBRACE int_expr . RECCLOSEBRACE

    RECCLOSEBRACE  shift, and go to state 125
    OR             shift, and go to state 54
    AND            shift, and go to state 55
    NE             shift, and go to state 56
    EQ             shift, and go to state 57
    GE             shift, and go to state 58
    LE             shift, and go to state 59
    GT             shift, and go to state 60
    LT             shift, and go to state 61
    SUB            shift, and go to state 62
    ADD            shift, and go to state 63
    DIV            shift, and go to state 64
    MUL            shift, and go to state 65


state 110

   54 string_factor: OBRACE string_factor CBRACE .

    $default  reduce using rule 54 (string_factor)


state 111

   57 string_factor: NAME .
   58              | NAME . RECOPENBRACE int_expr RECCLOSEBRACE

    RECOPENBRACE  shift, and go to state 78

    $default  reduce using rule 57 (string_factor)


state 112

   54 string_factor: OBRACE . string_factor CBRACE

    NAME         shift, and go to state 111
    STRINGCONST  shift, and go to state 46
    OBRACE       shift, and go to state 112

    string_factor  go to state 80


state 113

   52 string_expr: string_expr ADD string_factor .

    $default  reduce using rule 52 (string_expr)


state 114

   24 block: BLOCK . commands KCOLB

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    commands    go to state 126
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 115

   63 cond: IF int_expr $@1 THEN block . $@2 ELSE block

    $default  reduce using rule 62 ($@2)

    $@2  go to state 127


state 116

   64 cycle: WHILE int_expr LOOP commands POOL .

    $default  reduce using rule 64 (cycle)


state 117

   30 io: READ OBRACE NAME CBRACE SEMICOLON .

    $default  reduce using rule 30 (io)


state 118

   32 io: WRITE OBRACE NUMBER CBRACE SEMICOLON .

    $default  reduce using rule 32 (io)


state 119

   31 io: WRITE OBRACE NAME CBRACE SEMICOLON .

    $default  reduce using rule 31 (io)


state 120

   18 decl_ref: NAME REF NAME COLON type SEMICOLON .

    $default  reduce using rule 18 (decl_ref)


state 121

   20 decl_func: NAME COLON type OBRACE chain_param CBRACE . func_block

    BLOCK  shift, and go to state 128

    func_block  go to state 129


state 122

   22 decl_list: decl_list decl_var .

    $default  reduce using rule 22 (decl_list)


state 123

   14 decl_var: namelist . COLON STRING SEMICOLON
   15         | namelist . COLON INTEGER SEMICOLON
   16 namelist: namelist . COMA NAME
   21 chain_param: decl_list namelist . COLON type

    COLON  shift, and go to state 130
    COMA   shift, and go to state 40


state 124

   58 string_factor: NAME RECOPENBRACE int_expr RECCLOSEBRACE .

    $default  reduce using rule 58 (string_factor)


state 125

   56 string_factor: STRINGCONST RECOPENBRACE int_expr RECCLOSEBRACE .

    $default  reduce using rule 56 (string_factor)


state 126

    3 commands: commands . command
   24 block: BLOCK commands . KCOLB

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    KCOLB  shift, and go to state 131
    GOTO   shift, and go to state 7

    command     go to state 38
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 127

   63 cond: IF int_expr $@1 THEN block $@2 . ELSE block

    ELSE  shift, and go to state 132


state 128

   25 func_block: BLOCK . commands RETURN expr SEMICOLON KCOLB

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    commands    go to state 133
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 129

   20 decl_func: NAME COLON type OBRACE chain_param CBRACE func_block .

    $default  reduce using rule 20 (decl_func)


state 130

   14 decl_var: namelist COLON . STRING SEMICOLON
   15         | namelist COLON . INTEGER SEMICOLON
   21 chain_param: decl_list namelist COLON . type

    STRING   shift, and go to state 134
    INTEGER  shift, and go to state 135

    type  go to state 136


state 131

   24 block: BLOCK commands KCOLB .

    $default  reduce using rule 24 (block)


state 132

   63 cond: IF int_expr $@1 THEN block $@2 ELSE . block

    BLOCK  shift, and go to state 114

    block  go to state 137


state 133

    3 commands: commands . command
   25 func_block: BLOCK commands . RETURN expr SEMICOLON KCOLB

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 138
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    LABEL   shift, and go to state 6
    GOTO    shift, and go to state 7

    command     go to state 38
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 134

   12 type: STRING .
   14 decl_var: namelist COLON STRING . SEMICOLON

    SEMICOLON  shift, and go to state 101

    $default  reduce using rule 12 (type)


state 135

   13 type: INTEGER .
   15 decl_var: namelist COLON INTEGER . SEMICOLON

    SEMICOLON  shift, and go to state 102

    $default  reduce using rule 13 (type)


state 136

   21 chain_param: decl_list namelist COLON type .

    $default  reduce using rule 21 (chain_param)


state 137

   63 cond: IF int_expr $@1 THEN block $@2 ELSE block .

    $default  reduce using rule 63 (cond)


state 138

   25 func_block: BLOCK commands RETURN . expr SEMICOLON KCOLB

    NUMBER       shift, and go to state 27
    NAME         shift, and go to state 45
    STRINGCONST  shift, and go to state 46
    OBRACE       shift, and go to state 47
    NOT          shift, and go to state 30

    expr           go to state 139
    int_expr       go to state 49
    string_expr    go to state 50
    string_factor  go to state 51


state 139

   25 func_block: BLOCK commands RETURN expr . SEMICOLON KCOLB

    SEMICOLON  shift, and go to state 140


state 140

   25 func_block: BLOCK commands RETURN expr SEMICOLON . KCOLB

    KCOLB  shift, and go to state 141


state 141

   25 func_block: BLOCK commands RETURN expr SEMICOLON KCOLB .

    $default  reduce using rule 25 (func_block)
