Terminals unused in grammar

   LABELNAME
   DELIM
   QUOTE


Rules useless in parser due to conflicts

   46 int_expr_1: OBRACE int_expr CBRACE


State 1 conflicts: 1 shift/reduce
State 28 conflicts: 3 reduce/reduce
State 32 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce
State 53 conflicts: 3 reduce/reduce
State 61 conflicts: 1 shift/reduce
State 63 conflicts: 1 shift/reduce
State 103 conflicts: 16 reduce/reduce
State 106 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce
State 122 conflicts: 1 shift/reduce
State 196 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: /* empty */
    2        | commands

    3 commands: commands command
    4         | command

    5 command: decl
    6        | action
    7        | control

    8 decl: decl_func
    9     | decl_var
   10     | decl_ref
   11     | decl_label

   12 type: STRING
   13     | INTEGER

   14 decl_var: namelist COLON STRING SEMICOLON
   15         | namelist COLON INTEGER SEMICOLON

   16 namelist: namelist COMA NAME
   17         | NAME

   18 decl_ref: NAME REF NAME COLON type SEMICOLON

   19 decl_label: LABEL NAME SEMICOLON

   20 decl_func: NAME COLON type OBRACE chain_param CBRACE func_block

   21 chain_param: decl_list namelist COLON type

   22 decl_list: decl_list decl_var
   23          | decl_var

   24 block: BLOCK commands KCOLB

   25 func_block: BLOCK commands RETURN expr SEMICOLON KCOLB

   26 action: assign
   27       | io
   28       | goto

   29 assign: NAME ASSIGN expr SEMICOLON

   30 io: READ OBRACE NAME CBRACE SEMICOLON
   31   | WRITE OBRACE NAME CBRACE SEMICOLON
   32   | WRITE OBRACE NUMBER CBRACE SEMICOLON

   33 goto: GOTO NAME SEMICOLON

   34 expr: string_expr
   35     | int_expr

   36 @1: /* empty */

   37 @2: /* empty */

   38 @3: /* empty */

   39 @4: /* empty */

   40 @5: /* empty */

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   42         | int_expr_1
   43         | OBRACE int_expr CBRACE

   44 int_expr_1: int_expr_1 OR int_expr_2
   45           | int_expr_2
   46           | OBRACE int_expr CBRACE

   47 int_expr_2: int_expr_2 AND int_expr_3
   48           | int_expr_3
   49           | OBRACE int_expr CBRACE

   50 int_expr_3: int_expr_3 ADD int_term
   51           | int_expr_3 SUB int_term
   52           | int_term

   53 int_term: int_term MUL int_factor
   54         | int_term DIV int_factor
   55         | int_factor

   56 int_factor: NUMBER
   57           | NAME
   58           | OBRACE int_expr_3 CBRACE
   59           | NAME OBRACE act_params CBRACE

   60 act_params: namelist COMA NAME
   61           | namelist COMA NUMBER
   62           | namelist COMA STRING
   63           | NAME
   64           | NUMBER
   65           | STRING

   66 bool_expr: bool_expr OR bool_term
   67          | bool_term

   68 bool_term: bool_term AND bool_factor
   69          | bool_factor

   70 bool_factor: OBRACE bool_expr CBRACE
   71            | int_expr LT int_expr
   72            | int_expr LE int_expr
   73            | int_expr GT int_expr
   74            | int_expr GE int_expr
   75            | int_expr EQ int_expr
   76            | int_expr NE int_expr
   77            | NAME
   78            | NOT bool_expr

   79 string_expr: string_expr ADD string_factor
   80            | string_factor

   81 string_factor: OBRACE string_factor CBRACE
   82              | STRINGCONST
   83              | STRINGCONST RECOPENBRACE int_expr RECCLOSEBRACE
   84              | NAME
   85              | NAME RECOPENBRACE int_expr RECCLOSEBRACE

   86 control: cond
   87        | cycle

   88 cond: IF bool_expr THEN block ELSE block

   89 cycle: WHILE bool_expr LOOP commands POOL


Terminals, with rules where they appear

$end (0) 0
error (256)
NUMBER (258) 32 56 61 64
NAME (259) 16 17 18 19 20 29 30 31 33 57 59 60 63 77 84 85
LABELNAME (260)
REF (261) 18
COLON (262) 14 15 18 20 21
SEMICOLON (263) 14 15 18 19 25 29 30 31 32 33
DELIM (264)
STRINGCONST (265) 82 83
QUOTE (266)
STRING (267) 12 14 62 65
INTEGER (268) 13 15
COMA (269) 16 60 61 62
RETURN (270) 25
ASSIGN (271) 29
LT (272) 41 71
LE (273) 41 72
GT (274) 41 73
GE (275) 41 74
EQ (276) 41 75
NE (277) 41 76
OR (278) 44 66
AND (279) 47 68
NOT (280) 78
IF (281) 88
WHILE (282) 89
LOOP (283) 89
POOL (284) 89
READ (285) 30
WRITE (286) 31 32
LABEL (287) 19
RECOPENBRACE (288) 83 85
RECCLOSEBRACE (289) 83 85
BLOCK (290) 24 25
KCOLB (291) 24 25
THEN (292) 88
ELSE (293) 88
GOTO (294) 33
ADD (295) 50 79
SUB (296) 51
MUL (297) 53
DIV (298) 54
OBRACE (299) 20 30 31 32 43 46 49 58 59 70 81
CBRACE (300) 20 30 31 32 43 46 49 58 59 70 81


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1 2, on right: 0
commands (48)
    on left: 3 4, on right: 2 3 24 25 89
command (49)
    on left: 5 6 7, on right: 3 4
decl (50)
    on left: 8 9 10 11, on right: 5
type (51)
    on left: 12 13, on right: 18 20 21
decl_var (52)
    on left: 14 15, on right: 9 22 23
namelist (53)
    on left: 16 17, on right: 14 15 16 21 60 61 62
decl_ref (54)
    on left: 18, on right: 10
decl_label (55)
    on left: 19, on right: 11
decl_func (56)
    on left: 20, on right: 8
chain_param (57)
    on left: 21, on right: 20
decl_list (58)
    on left: 22 23, on right: 21 22
block (59)
    on left: 24, on right: 88
func_block (60)
    on left: 25, on right: 20
action (61)
    on left: 26 27 28, on right: 6
assign (62)
    on left: 29, on right: 26
io (63)
    on left: 30 31 32, on right: 27
goto (64)
    on left: 33, on right: 28
expr (65)
    on left: 34 35, on right: 25 29
int_expr (66)
    on left: 41 42 43, on right: 35 41 43 46 49 71 72 73 74 75 76 83
    85
@1 (67)
    on left: 36, on right: 41
@2 (68)
    on left: 37, on right: 41
@3 (69)
    on left: 38, on right: 41
@4 (70)
    on left: 39, on right: 41
@5 (71)
    on left: 40, on right: 41
int_expr_1 (72)
    on left: 44 45 46, on right: 42 44
int_expr_2 (73)
    on left: 47 48 49, on right: 44 45 47
int_expr_3 (74)
    on left: 50 51 52, on right: 47 48 50 51 58
int_term (75)
    on left: 53 54 55, on right: 50 51 52 53 54
int_factor (76)
    on left: 56 57 58 59, on right: 53 54 55
act_params (77)
    on left: 60 61 62 63 64 65, on right: 59
bool_expr (78)
    on left: 66 67, on right: 66 70 78 88 89
bool_term (79)
    on left: 68 69, on right: 66 67 68
bool_factor (80)
    on left: 70 71 72 73 74 75 76 77 78, on right: 68 69
string_expr (81)
    on left: 79 80, on right: 34 79
string_factor (82)
    on left: 81 82 83 84 85, on right: 79 80 81
control (83)
    on left: 86 87, on right: 7
cond (84)
    on left: 88, on right: 86
cycle (85)
    on left: 89, on right: 87


state 0

    0 $accept: . program $end

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    $default  reduce using rule 1 (program)

    program     go to state 8
    commands    go to state 9
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 1

   17 namelist: NAME .
   18 decl_ref: NAME . REF NAME COLON type SEMICOLON
   20 decl_func: NAME . COLON type OBRACE chain_param CBRACE func_block
   29 assign: NAME . ASSIGN expr SEMICOLON

    REF     shift, and go to state 24
    COLON   shift, and go to state 25
    ASSIGN  shift, and go to state 26

    COLON     [reduce using rule 17 (namelist)]
    $default  reduce using rule 17 (namelist)


state 2

   88 cond: IF . bool_expr THEN block ELSE block

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    NOT     shift, and go to state 29
    OBRACE  shift, and go to state 30

    int_expr     go to state 31
    int_expr_1   go to state 32
    int_expr_2   go to state 33
    int_expr_3   go to state 34
    int_term     go to state 35
    int_factor   go to state 36
    bool_expr    go to state 37
    bool_term    go to state 38
    bool_factor  go to state 39


state 3

   89 cycle: WHILE . bool_expr LOOP commands POOL

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    NOT     shift, and go to state 29
    OBRACE  shift, and go to state 30

    int_expr     go to state 31
    int_expr_1   go to state 32
    int_expr_2   go to state 33
    int_expr_3   go to state 34
    int_term     go to state 35
    int_factor   go to state 36
    bool_expr    go to state 40
    bool_term    go to state 38
    bool_factor  go to state 39


state 4

   30 io: READ . OBRACE NAME CBRACE SEMICOLON

    OBRACE  shift, and go to state 41


state 5

   31 io: WRITE . OBRACE NAME CBRACE SEMICOLON
   32   | WRITE . OBRACE NUMBER CBRACE SEMICOLON

    OBRACE  shift, and go to state 42


state 6

   19 decl_label: LABEL . NAME SEMICOLON

    NAME  shift, and go to state 43


state 7

   33 goto: GOTO . NAME SEMICOLON

    NAME  shift, and go to state 44


state 8

    0 $accept: program . $end

    $end  shift, and go to state 45


state 9

    2 program: commands .
    3 commands: commands . command

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    $default  reduce using rule 2 (program)

    command     go to state 46
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 10

    4 commands: command .

    $default  reduce using rule 4 (commands)


state 11

    5 command: decl .

    $default  reduce using rule 5 (command)


state 12

    9 decl: decl_var .

    $default  reduce using rule 9 (decl)


state 13

   14 decl_var: namelist . COLON STRING SEMICOLON
   15         | namelist . COLON INTEGER SEMICOLON
   16 namelist: namelist . COMA NAME

    COLON  shift, and go to state 47
    COMA   shift, and go to state 48


state 14

   10 decl: decl_ref .

    $default  reduce using rule 10 (decl)


state 15

   11 decl: decl_label .

    $default  reduce using rule 11 (decl)


state 16

    8 decl: decl_func .

    $default  reduce using rule 8 (decl)


state 17

    6 command: action .

    $default  reduce using rule 6 (command)


state 18

   26 action: assign .

    $default  reduce using rule 26 (action)


state 19

   27 action: io .

    $default  reduce using rule 27 (action)


state 20

   28 action: goto .

    $default  reduce using rule 28 (action)


state 21

    7 command: control .

    $default  reduce using rule 7 (command)


state 22

   86 control: cond .

    $default  reduce using rule 86 (control)


state 23

   87 control: cycle .

    $default  reduce using rule 87 (control)


state 24

   18 decl_ref: NAME REF . NAME COLON type SEMICOLON

    NAME  shift, and go to state 49


state 25

   20 decl_func: NAME COLON . type OBRACE chain_param CBRACE func_block

    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51

    type  go to state 52


state 26

   29 assign: NAME ASSIGN . expr SEMICOLON

    NUMBER       shift, and go to state 27
    NAME         shift, and go to state 53
    STRINGCONST  shift, and go to state 54
    OBRACE       shift, and go to state 55

    expr           go to state 56
    int_expr       go to state 57
    int_expr_1     go to state 32
    int_expr_2     go to state 33
    int_expr_3     go to state 34
    int_term       go to state 35
    int_factor     go to state 36
    string_expr    go to state 58
    string_factor  go to state 59


state 27

   56 int_factor: NUMBER .

    $default  reduce using rule 56 (int_factor)


state 28

   57 int_factor: NAME .
   59           | NAME . OBRACE act_params CBRACE
   77 bool_factor: NAME .

    OBRACE  shift, and go to state 60

    OR        reduce using rule 57 (int_factor)
    OR        [reduce using rule 77 (bool_factor)]
    AND       reduce using rule 57 (int_factor)
    AND       [reduce using rule 77 (bool_factor)]
    LOOP      reduce using rule 77 (bool_factor)
    THEN      reduce using rule 77 (bool_factor)
    CBRACE    reduce using rule 57 (int_factor)
    CBRACE    [reduce using rule 77 (bool_factor)]
    $default  reduce using rule 57 (int_factor)


state 29

   78 bool_factor: NOT . bool_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    NOT     shift, and go to state 29
    OBRACE  shift, and go to state 30

    int_expr     go to state 31
    int_expr_1   go to state 32
    int_expr_2   go to state 33
    int_expr_3   go to state 34
    int_term     go to state 35
    int_factor   go to state 36
    bool_expr    go to state 61
    bool_term    go to state 38
    bool_factor  go to state 39


state 30

   43 int_expr: OBRACE . int_expr CBRACE
   46 int_expr_1: OBRACE . int_expr CBRACE
   49 int_expr_2: OBRACE . int_expr CBRACE
   58 int_factor: OBRACE . int_expr_3 CBRACE
   70 bool_factor: OBRACE . bool_expr CBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    NOT     shift, and go to state 29
    OBRACE  shift, and go to state 30

    int_expr     go to state 62
    int_expr_1   go to state 32
    int_expr_2   go to state 33
    int_expr_3   go to state 63
    int_term     go to state 35
    int_factor   go to state 36
    bool_expr    go to state 64
    bool_term    go to state 38
    bool_factor  go to state 39


state 31

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   71 bool_factor: int_expr . LT int_expr
   72            | int_expr . LE int_expr
   73            | int_expr . GT int_expr
   74            | int_expr . GE int_expr
   75            | int_expr . EQ int_expr
   76            | int_expr . NE int_expr

    LT  shift, and go to state 65
    LE  shift, and go to state 66
    GT  shift, and go to state 67
    GE  shift, and go to state 68
    EQ  shift, and go to state 69
    NE  shift, and go to state 70


state 32

   42 int_expr: int_expr_1 .
   44 int_expr_1: int_expr_1 . OR int_expr_2

    OR  shift, and go to state 71

    OR        [reduce using rule 42 (int_expr)]
    $default  reduce using rule 42 (int_expr)


state 33

   45 int_expr_1: int_expr_2 .
   47 int_expr_2: int_expr_2 . AND int_expr_3

    AND  shift, and go to state 72

    AND       [reduce using rule 45 (int_expr_1)]
    $default  reduce using rule 45 (int_expr_1)


state 34

   48 int_expr_2: int_expr_3 .
   50 int_expr_3: int_expr_3 . ADD int_term
   51           | int_expr_3 . SUB int_term

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 48 (int_expr_2)


state 35

   52 int_expr_3: int_term .
   53 int_term: int_term . MUL int_factor
   54         | int_term . DIV int_factor

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76

    $default  reduce using rule 52 (int_expr_3)


state 36

   55 int_term: int_factor .

    $default  reduce using rule 55 (int_term)


state 37

   66 bool_expr: bool_expr . OR bool_term
   88 cond: IF bool_expr . THEN block ELSE block

    OR    shift, and go to state 77
    THEN  shift, and go to state 78


state 38

   67 bool_expr: bool_term .
   68 bool_term: bool_term . AND bool_factor

    AND  shift, and go to state 79

    AND       [reduce using rule 67 (bool_expr)]
    $default  reduce using rule 67 (bool_expr)


state 39

   69 bool_term: bool_factor .

    $default  reduce using rule 69 (bool_term)


state 40

   66 bool_expr: bool_expr . OR bool_term
   89 cycle: WHILE bool_expr . LOOP commands POOL

    OR    shift, and go to state 77
    LOOP  shift, and go to state 80


state 41

   30 io: READ OBRACE . NAME CBRACE SEMICOLON

    NAME  shift, and go to state 81


state 42

   31 io: WRITE OBRACE . NAME CBRACE SEMICOLON
   32   | WRITE OBRACE . NUMBER CBRACE SEMICOLON

    NUMBER  shift, and go to state 82
    NAME    shift, and go to state 83


state 43

   19 decl_label: LABEL NAME . SEMICOLON

    SEMICOLON  shift, and go to state 84


state 44

   33 goto: GOTO NAME . SEMICOLON

    SEMICOLON  shift, and go to state 85


state 45

    0 $accept: program $end .

    $default  accept


state 46

    3 commands: commands command .

    $default  reduce using rule 3 (commands)


state 47

   14 decl_var: namelist COLON . STRING SEMICOLON
   15         | namelist COLON . INTEGER SEMICOLON

    STRING   shift, and go to state 86
    INTEGER  shift, and go to state 87


state 48

   16 namelist: namelist COMA . NAME

    NAME  shift, and go to state 88


state 49

   18 decl_ref: NAME REF NAME . COLON type SEMICOLON

    COLON  shift, and go to state 89


state 50

   12 type: STRING .

    $default  reduce using rule 12 (type)


state 51

   13 type: INTEGER .

    $default  reduce using rule 13 (type)


state 52

   20 decl_func: NAME COLON type . OBRACE chain_param CBRACE func_block

    OBRACE  shift, and go to state 90


state 53

   57 int_factor: NAME .
   59           | NAME . OBRACE act_params CBRACE
   84 string_factor: NAME .
   85              | NAME . RECOPENBRACE int_expr RECCLOSEBRACE

    RECOPENBRACE  shift, and go to state 91
    OBRACE        shift, and go to state 60

    SEMICOLON  reduce using rule 57 (int_factor)
    SEMICOLON  [reduce using rule 84 (string_factor)]
    ADD        reduce using rule 57 (int_factor)
    ADD        [reduce using rule 84 (string_factor)]
    CBRACE     reduce using rule 57 (int_factor)
    CBRACE     [reduce using rule 84 (string_factor)]
    $default   reduce using rule 57 (int_factor)


state 54

   82 string_factor: STRINGCONST .
   83              | STRINGCONST . RECOPENBRACE int_expr RECCLOSEBRACE

    RECOPENBRACE  shift, and go to state 92

    $default  reduce using rule 82 (string_factor)


state 55

   43 int_expr: OBRACE . int_expr CBRACE
   46 int_expr_1: OBRACE . int_expr CBRACE
   49 int_expr_2: OBRACE . int_expr CBRACE
   58 int_factor: OBRACE . int_expr_3 CBRACE
   81 string_factor: OBRACE . string_factor CBRACE

    NUMBER       shift, and go to state 27
    NAME         shift, and go to state 53
    STRINGCONST  shift, and go to state 54
    OBRACE       shift, and go to state 55

    int_expr       go to state 93
    int_expr_1     go to state 32
    int_expr_2     go to state 33
    int_expr_3     go to state 63
    int_term       go to state 35
    int_factor     go to state 36
    string_factor  go to state 94


state 56

   29 assign: NAME ASSIGN expr . SEMICOLON

    SEMICOLON  shift, and go to state 95


state 57

   35 expr: int_expr .
   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96

    $default  reduce using rule 35 (expr)


state 58

   34 expr: string_expr .
   79 string_expr: string_expr . ADD string_factor

    ADD  shift, and go to state 97

    $default  reduce using rule 34 (expr)


state 59

   80 string_expr: string_factor .

    $default  reduce using rule 80 (string_expr)


state 60

   59 int_factor: NAME OBRACE . act_params CBRACE

    NUMBER  shift, and go to state 98
    NAME    shift, and go to state 99
    STRING  shift, and go to state 100

    namelist    go to state 101
    act_params  go to state 102


state 61

   66 bool_expr: bool_expr . OR bool_term
   78 bool_factor: NOT bool_expr .

    OR  shift, and go to state 77

    OR        [reduce using rule 78 (bool_factor)]
    $default  reduce using rule 78 (bool_factor)


state 62

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   43         | OBRACE int_expr . CBRACE
   46 int_expr_1: OBRACE int_expr . CBRACE
   49 int_expr_2: OBRACE int_expr . CBRACE
   71 bool_factor: int_expr . LT int_expr
   72            | int_expr . LE int_expr
   73            | int_expr . GT int_expr
   74            | int_expr . GE int_expr
   75            | int_expr . EQ int_expr
   76            | int_expr . NE int_expr

    LT      shift, and go to state 65
    LE      shift, and go to state 66
    GT      shift, and go to state 67
    GE      shift, and go to state 68
    EQ      shift, and go to state 69
    NE      shift, and go to state 70
    CBRACE  shift, and go to state 103


state 63

   48 int_expr_2: int_expr_3 .
   50 int_expr_3: int_expr_3 . ADD int_term
   51           | int_expr_3 . SUB int_term
   58 int_factor: OBRACE int_expr_3 . CBRACE

    ADD     shift, and go to state 73
    SUB     shift, and go to state 74
    CBRACE  shift, and go to state 104

    CBRACE    [reduce using rule 48 (int_expr_2)]
    $default  reduce using rule 48 (int_expr_2)


state 64

   66 bool_expr: bool_expr . OR bool_term
   70 bool_factor: OBRACE bool_expr . CBRACE

    OR      shift, and go to state 77
    CBRACE  shift, and go to state 105


state 65

   41 int_expr: int_expr LT . int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   71 bool_factor: int_expr LT . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 108
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 66

   72 bool_factor: int_expr LE . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 109
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 67

   73 bool_factor: int_expr GT . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 110
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 68

   74 bool_factor: int_expr GE . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 111
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 69

   75 bool_factor: int_expr EQ . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 112
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 70

   76 bool_factor: int_expr NE . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 113
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 71

   44 int_expr_1: int_expr_1 OR . int_expr_2

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 114

    int_expr_2  go to state 115
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 72

   47 int_expr_2: int_expr_2 AND . int_expr_3

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 116

    int_expr_3  go to state 117
    int_term    go to state 35
    int_factor  go to state 36


state 73

   50 int_expr_3: int_expr_3 ADD . int_term

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 116

    int_term    go to state 118
    int_factor  go to state 36


state 74

   51 int_expr_3: int_expr_3 SUB . int_term

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 116

    int_term    go to state 119
    int_factor  go to state 36


state 75

   53 int_term: int_term MUL . int_factor

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 116

    int_factor  go to state 120


state 76

   54 int_term: int_term DIV . int_factor

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 116

    int_factor  go to state 121


state 77

   66 bool_expr: bool_expr OR . bool_term

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    NOT     shift, and go to state 29
    OBRACE  shift, and go to state 30

    int_expr     go to state 31
    int_expr_1   go to state 32
    int_expr_2   go to state 33
    int_expr_3   go to state 34
    int_term     go to state 35
    int_factor   go to state 36
    bool_term    go to state 122
    bool_factor  go to state 39


state 78

   88 cond: IF bool_expr THEN . block ELSE block

    BLOCK  shift, and go to state 123

    block  go to state 124


state 79

   68 bool_term: bool_term AND . bool_factor

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 28
    NOT     shift, and go to state 29
    OBRACE  shift, and go to state 30

    int_expr     go to state 31
    int_expr_1   go to state 32
    int_expr_2   go to state 33
    int_expr_3   go to state 34
    int_term     go to state 35
    int_factor   go to state 36
    bool_factor  go to state 125


state 80

   89 cycle: WHILE bool_expr LOOP . commands POOL

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    commands    go to state 126
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 81

   30 io: READ OBRACE NAME . CBRACE SEMICOLON

    CBRACE  shift, and go to state 127


state 82

   32 io: WRITE OBRACE NUMBER . CBRACE SEMICOLON

    CBRACE  shift, and go to state 128


state 83

   31 io: WRITE OBRACE NAME . CBRACE SEMICOLON

    CBRACE  shift, and go to state 129


state 84

   19 decl_label: LABEL NAME SEMICOLON .

    $default  reduce using rule 19 (decl_label)


state 85

   33 goto: GOTO NAME SEMICOLON .

    $default  reduce using rule 33 (goto)


state 86

   14 decl_var: namelist COLON STRING . SEMICOLON

    SEMICOLON  shift, and go to state 130


state 87

   15 decl_var: namelist COLON INTEGER . SEMICOLON

    SEMICOLON  shift, and go to state 131


state 88

   16 namelist: namelist COMA NAME .

    $default  reduce using rule 16 (namelist)


state 89

   18 decl_ref: NAME REF NAME COLON . type SEMICOLON

    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51

    type  go to state 132


state 90

   20 decl_func: NAME COLON type OBRACE . chain_param CBRACE func_block

    NAME  shift, and go to state 133

    decl_var     go to state 134
    namelist     go to state 13
    chain_param  go to state 135
    decl_list    go to state 136


state 91

   85 string_factor: NAME RECOPENBRACE . int_expr RECCLOSEBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 137
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 92

   83 string_factor: STRINGCONST RECOPENBRACE . int_expr RECCLOSEBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 138
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 93

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   43         | OBRACE int_expr . CBRACE
   46 int_expr_1: OBRACE int_expr . CBRACE
   49 int_expr_2: OBRACE int_expr . CBRACE

    LT      shift, and go to state 96
    CBRACE  shift, and go to state 103


state 94

   81 string_factor: OBRACE string_factor . CBRACE

    CBRACE  shift, and go to state 139


state 95

   29 assign: NAME ASSIGN expr SEMICOLON .

    $default  reduce using rule 29 (assign)


state 96

   41 int_expr: int_expr LT . int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 140
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 97

   79 string_expr: string_expr ADD . string_factor

    NAME         shift, and go to state 141
    STRINGCONST  shift, and go to state 54
    OBRACE       shift, and go to state 142

    string_factor  go to state 143


state 98

   64 act_params: NUMBER .

    $default  reduce using rule 64 (act_params)


state 99

   17 namelist: NAME .
   63 act_params: NAME .

    CBRACE    reduce using rule 63 (act_params)
    $default  reduce using rule 17 (namelist)


state 100

   65 act_params: STRING .

    $default  reduce using rule 65 (act_params)


state 101

   16 namelist: namelist . COMA NAME
   60 act_params: namelist . COMA NAME
   61           | namelist . COMA NUMBER
   62           | namelist . COMA STRING

    COMA  shift, and go to state 144


state 102

   59 int_factor: NAME OBRACE act_params . CBRACE

    CBRACE  shift, and go to state 145


state 103

   43 int_expr: OBRACE int_expr CBRACE .
   46 int_expr_1: OBRACE int_expr CBRACE .
   49 int_expr_2: OBRACE int_expr CBRACE .

    NUMBER         reduce using rule 43 (int_expr)
    NUMBER         [reduce using rule 46 (int_expr_1)]
    NUMBER         [reduce using rule 49 (int_expr_2)]
    NAME           reduce using rule 43 (int_expr)
    NAME           [reduce using rule 46 (int_expr_1)]
    NAME           [reduce using rule 49 (int_expr_2)]
    SEMICOLON      reduce using rule 43 (int_expr)
    SEMICOLON      [reduce using rule 46 (int_expr_1)]
    SEMICOLON      [reduce using rule 49 (int_expr_2)]
    LT             reduce using rule 43 (int_expr)
    LT             [reduce using rule 46 (int_expr_1)]
    LT             [reduce using rule 49 (int_expr_2)]
    LE             reduce using rule 43 (int_expr)
    LE             [reduce using rule 46 (int_expr_1)]
    LE             [reduce using rule 49 (int_expr_2)]
    GT             reduce using rule 43 (int_expr)
    GT             [reduce using rule 46 (int_expr_1)]
    GT             [reduce using rule 49 (int_expr_2)]
    GE             reduce using rule 43 (int_expr)
    GE             [reduce using rule 46 (int_expr_1)]
    GE             [reduce using rule 49 (int_expr_2)]
    EQ             reduce using rule 43 (int_expr)
    EQ             [reduce using rule 46 (int_expr_1)]
    EQ             [reduce using rule 49 (int_expr_2)]
    NE             reduce using rule 43 (int_expr)
    NE             [reduce using rule 46 (int_expr_1)]
    NE             [reduce using rule 49 (int_expr_2)]
    OR             reduce using rule 43 (int_expr)
    OR             [reduce using rule 46 (int_expr_1)]
    OR             [reduce using rule 49 (int_expr_2)]
    AND            reduce using rule 43 (int_expr)
    AND            [reduce using rule 46 (int_expr_1)]
    AND            [reduce using rule 49 (int_expr_2)]
    LOOP           reduce using rule 43 (int_expr)
    LOOP           [reduce using rule 46 (int_expr_1)]
    LOOP           [reduce using rule 49 (int_expr_2)]
    RECCLOSEBRACE  reduce using rule 43 (int_expr)
    RECCLOSEBRACE  [reduce using rule 46 (int_expr_1)]
    RECCLOSEBRACE  [reduce using rule 49 (int_expr_2)]
    THEN           reduce using rule 43 (int_expr)
    THEN           [reduce using rule 46 (int_expr_1)]
    THEN           [reduce using rule 49 (int_expr_2)]
    OBRACE         reduce using rule 43 (int_expr)
    OBRACE         [reduce using rule 46 (int_expr_1)]
    OBRACE         [reduce using rule 49 (int_expr_2)]
    CBRACE         reduce using rule 43 (int_expr)
    CBRACE         [reduce using rule 46 (int_expr_1)]
    CBRACE         [reduce using rule 49 (int_expr_2)]
    $default       reduce using rule 43 (int_expr)


state 104

   58 int_factor: OBRACE int_expr_3 CBRACE .

    $default  reduce using rule 58 (int_factor)


state 105

   70 bool_factor: OBRACE bool_expr CBRACE .

    $default  reduce using rule 70 (bool_factor)


state 106

   57 int_factor: NAME .
   59           | NAME . OBRACE act_params CBRACE

    OBRACE  shift, and go to state 60

    OBRACE    [reduce using rule 57 (int_factor)]
    $default  reduce using rule 57 (int_factor)


state 107

   43 int_expr: OBRACE . int_expr CBRACE
   46 int_expr_1: OBRACE . int_expr CBRACE
   49 int_expr_2: OBRACE . int_expr CBRACE
   58 int_factor: OBRACE . int_expr_3 CBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 93
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 63
    int_term    go to state 35
    int_factor  go to state 36


state 108

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr . @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   71 bool_factor: int_expr LT int_expr .

    LT  shift, and go to state 96

    NUMBER    reduce using rule 36 (@1)
    NAME      reduce using rule 36 (@1)
    OBRACE    reduce using rule 36 (@1)
    $default  reduce using rule 71 (bool_factor)

    @1  go to state 146


state 109

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   72 bool_factor: int_expr LE int_expr .

    LT  shift, and go to state 96

    $default  reduce using rule 72 (bool_factor)


state 110

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   73 bool_factor: int_expr GT int_expr .

    LT  shift, and go to state 96

    $default  reduce using rule 73 (bool_factor)


state 111

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   74 bool_factor: int_expr GE int_expr .

    LT  shift, and go to state 96

    $default  reduce using rule 74 (bool_factor)


state 112

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   75 bool_factor: int_expr EQ int_expr .

    LT  shift, and go to state 96

    $default  reduce using rule 75 (bool_factor)


state 113

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   76 bool_factor: int_expr NE int_expr .

    LT  shift, and go to state 96

    $default  reduce using rule 76 (bool_factor)


state 114

   49 int_expr_2: OBRACE . int_expr CBRACE
   58 int_factor: OBRACE . int_expr_3 CBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 147
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 63
    int_term    go to state 35
    int_factor  go to state 36


state 115

   44 int_expr_1: int_expr_1 OR int_expr_2 .
   47 int_expr_2: int_expr_2 . AND int_expr_3

    AND  shift, and go to state 72

    AND       [reduce using rule 44 (int_expr_1)]
    $default  reduce using rule 44 (int_expr_1)


state 116

   58 int_factor: OBRACE . int_expr_3 CBRACE

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 116

    int_expr_3  go to state 148
    int_term    go to state 35
    int_factor  go to state 36


state 117

   47 int_expr_2: int_expr_2 AND int_expr_3 .
   50 int_expr_3: int_expr_3 . ADD int_term
   51           | int_expr_3 . SUB int_term

    ADD  shift, and go to state 73
    SUB  shift, and go to state 74

    $default  reduce using rule 47 (int_expr_2)


state 118

   50 int_expr_3: int_expr_3 ADD int_term .
   53 int_term: int_term . MUL int_factor
   54         | int_term . DIV int_factor

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76

    $default  reduce using rule 50 (int_expr_3)


state 119

   51 int_expr_3: int_expr_3 SUB int_term .
   53 int_term: int_term . MUL int_factor
   54         | int_term . DIV int_factor

    MUL  shift, and go to state 75
    DIV  shift, and go to state 76

    $default  reduce using rule 51 (int_expr_3)


state 120

   53 int_term: int_term MUL int_factor .

    $default  reduce using rule 53 (int_term)


state 121

   54 int_term: int_term DIV int_factor .

    $default  reduce using rule 54 (int_term)


state 122

   66 bool_expr: bool_expr OR bool_term .
   68 bool_term: bool_term . AND bool_factor

    AND  shift, and go to state 79

    AND       [reduce using rule 66 (bool_expr)]
    $default  reduce using rule 66 (bool_expr)


state 123

   24 block: BLOCK . commands KCOLB

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    commands    go to state 149
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 124

   88 cond: IF bool_expr THEN block . ELSE block

    ELSE  shift, and go to state 150


state 125

   68 bool_term: bool_term AND bool_factor .

    $default  reduce using rule 68 (bool_term)


state 126

    3 commands: commands . command
   89 cycle: WHILE bool_expr LOOP commands . POOL

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    POOL   shift, and go to state 151
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    command     go to state 46
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 127

   30 io: READ OBRACE NAME CBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 152


state 128

   32 io: WRITE OBRACE NUMBER CBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 153


state 129

   31 io: WRITE OBRACE NAME CBRACE . SEMICOLON

    SEMICOLON  shift, and go to state 154


state 130

   14 decl_var: namelist COLON STRING SEMICOLON .

    $default  reduce using rule 14 (decl_var)


state 131

   15 decl_var: namelist COLON INTEGER SEMICOLON .

    $default  reduce using rule 15 (decl_var)


state 132

   18 decl_ref: NAME REF NAME COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 155


state 133

   17 namelist: NAME .

    $default  reduce using rule 17 (namelist)


state 134

   23 decl_list: decl_var .

    $default  reduce using rule 23 (decl_list)


state 135

   20 decl_func: NAME COLON type OBRACE chain_param . CBRACE func_block

    CBRACE  shift, and go to state 156


state 136

   21 chain_param: decl_list . namelist COLON type
   22 decl_list: decl_list . decl_var

    NAME  shift, and go to state 133

    decl_var  go to state 157
    namelist  go to state 158


state 137

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   85 string_factor: NAME RECOPENBRACE int_expr . RECCLOSEBRACE

    LT             shift, and go to state 96
    RECCLOSEBRACE  shift, and go to state 159


state 138

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   83 string_factor: STRINGCONST RECOPENBRACE int_expr . RECCLOSEBRACE

    LT             shift, and go to state 96
    RECCLOSEBRACE  shift, and go to state 160


state 139

   81 string_factor: OBRACE string_factor CBRACE .

    $default  reduce using rule 81 (string_factor)


state 140

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr . @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96

    $default  reduce using rule 36 (@1)

    @1  go to state 146


state 141

   84 string_factor: NAME .
   85              | NAME . RECOPENBRACE int_expr RECCLOSEBRACE

    RECOPENBRACE  shift, and go to state 91

    $default  reduce using rule 84 (string_factor)


state 142

   81 string_factor: OBRACE . string_factor CBRACE

    NAME         shift, and go to state 141
    STRINGCONST  shift, and go to state 54
    OBRACE       shift, and go to state 142

    string_factor  go to state 94


state 143

   79 string_expr: string_expr ADD string_factor .

    $default  reduce using rule 79 (string_expr)


state 144

   16 namelist: namelist COMA . NAME
   60 act_params: namelist COMA . NAME
   61           | namelist COMA . NUMBER
   62           | namelist COMA . STRING

    NUMBER  shift, and go to state 161
    NAME    shift, and go to state 162
    STRING  shift, and go to state 163


state 145

   59 int_factor: NAME OBRACE act_params CBRACE .

    $default  reduce using rule 59 (int_factor)


state 146

   41 int_expr: int_expr LT int_expr @1 . int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 164
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 147

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   49 int_expr_2: OBRACE int_expr . CBRACE

    LT      shift, and go to state 96
    CBRACE  shift, and go to state 165


state 148

   50 int_expr_3: int_expr_3 . ADD int_term
   51           | int_expr_3 . SUB int_term
   58 int_factor: OBRACE int_expr_3 . CBRACE

    ADD     shift, and go to state 73
    SUB     shift, and go to state 74
    CBRACE  shift, and go to state 104


state 149

    3 commands: commands . command
   24 block: BLOCK commands . KCOLB

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    KCOLB  shift, and go to state 166
    GOTO   shift, and go to state 7

    command     go to state 46
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 150

   88 cond: IF bool_expr THEN block ELSE . block

    BLOCK  shift, and go to state 123

    block  go to state 167


state 151

   89 cycle: WHILE bool_expr LOOP commands POOL .

    $default  reduce using rule 89 (cycle)


state 152

   30 io: READ OBRACE NAME CBRACE SEMICOLON .

    $default  reduce using rule 30 (io)


state 153

   32 io: WRITE OBRACE NUMBER CBRACE SEMICOLON .

    $default  reduce using rule 32 (io)


state 154

   31 io: WRITE OBRACE NAME CBRACE SEMICOLON .

    $default  reduce using rule 31 (io)


state 155

   18 decl_ref: NAME REF NAME COLON type SEMICOLON .

    $default  reduce using rule 18 (decl_ref)


state 156

   20 decl_func: NAME COLON type OBRACE chain_param CBRACE . func_block

    BLOCK  shift, and go to state 168

    func_block  go to state 169


state 157

   22 decl_list: decl_list decl_var .

    $default  reduce using rule 22 (decl_list)


state 158

   14 decl_var: namelist . COLON STRING SEMICOLON
   15         | namelist . COLON INTEGER SEMICOLON
   16 namelist: namelist . COMA NAME
   21 chain_param: decl_list namelist . COLON type

    COLON  shift, and go to state 170
    COMA   shift, and go to state 48


state 159

   85 string_factor: NAME RECOPENBRACE int_expr RECCLOSEBRACE .

    $default  reduce using rule 85 (string_factor)


state 160

   83 string_factor: STRINGCONST RECOPENBRACE int_expr RECCLOSEBRACE .

    $default  reduce using rule 83 (string_factor)


state 161

   61 act_params: namelist COMA NUMBER .

    $default  reduce using rule 61 (act_params)


state 162

   16 namelist: namelist COMA NAME .
   60 act_params: namelist COMA NAME .

    CBRACE    reduce using rule 60 (act_params)
    $default  reduce using rule 16 (namelist)


state 163

   62 act_params: namelist COMA STRING .

    $default  reduce using rule 62 (act_params)


state 164

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr . GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96
    GT  shift, and go to state 171


state 165

   49 int_expr_2: OBRACE int_expr CBRACE .

    $default  reduce using rule 49 (int_expr_2)


state 166

   24 block: BLOCK commands KCOLB .

    $default  reduce using rule 24 (block)


state 167

   88 cond: IF bool_expr THEN block ELSE block .

    $default  reduce using rule 88 (cond)


state 168

   25 func_block: BLOCK . commands RETURN expr SEMICOLON KCOLB

    NAME   shift, and go to state 1
    IF     shift, and go to state 2
    WHILE  shift, and go to state 3
    READ   shift, and go to state 4
    WRITE  shift, and go to state 5
    LABEL  shift, and go to state 6
    GOTO   shift, and go to state 7

    commands    go to state 172
    command     go to state 10
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 169

   20 decl_func: NAME COLON type OBRACE chain_param CBRACE func_block .

    $default  reduce using rule 20 (decl_func)


state 170

   14 decl_var: namelist COLON . STRING SEMICOLON
   15         | namelist COLON . INTEGER SEMICOLON
   21 chain_param: decl_list namelist COLON . type

    STRING   shift, and go to state 173
    INTEGER  shift, and go to state 174

    type  go to state 175


state 171

   41 int_expr: int_expr LT int_expr @1 int_expr GT . int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 176
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 172

    3 commands: commands . command
   25 func_block: BLOCK commands . RETURN expr SEMICOLON KCOLB

    NAME    shift, and go to state 1
    RETURN  shift, and go to state 177
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    READ    shift, and go to state 4
    WRITE   shift, and go to state 5
    LABEL   shift, and go to state 6
    GOTO    shift, and go to state 7

    command     go to state 46
    decl        go to state 11
    decl_var    go to state 12
    namelist    go to state 13
    decl_ref    go to state 14
    decl_label  go to state 15
    decl_func   go to state 16
    action      go to state 17
    assign      go to state 18
    io          go to state 19
    goto        go to state 20
    control     go to state 21
    cond        go to state 22
    cycle       go to state 23


state 173

   12 type: STRING .
   14 decl_var: namelist COLON STRING . SEMICOLON

    SEMICOLON  shift, and go to state 130

    $default  reduce using rule 12 (type)


state 174

   13 type: INTEGER .
   15 decl_var: namelist COLON INTEGER . SEMICOLON

    SEMICOLON  shift, and go to state 131

    $default  reduce using rule 13 (type)


state 175

   21 chain_param: decl_list namelist COLON type .

    $default  reduce using rule 21 (chain_param)


state 176

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr . @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96

    $default  reduce using rule 37 (@2)

    @2  go to state 178


state 177

   25 func_block: BLOCK commands RETURN . expr SEMICOLON KCOLB

    NUMBER       shift, and go to state 27
    NAME         shift, and go to state 53
    STRINGCONST  shift, and go to state 54
    OBRACE       shift, and go to state 55

    expr           go to state 179
    int_expr       go to state 57
    int_expr_1     go to state 32
    int_expr_2     go to state 33
    int_expr_3     go to state 34
    int_term       go to state 35
    int_factor     go to state 36
    string_expr    go to state 58
    string_factor  go to state 59


state 178

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 . int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 180
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 179

   25 func_block: BLOCK commands RETURN expr . SEMICOLON KCOLB

    SEMICOLON  shift, and go to state 181


state 180

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr . LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96
    LE  shift, and go to state 182


state 181

   25 func_block: BLOCK commands RETURN expr SEMICOLON . KCOLB

    KCOLB  shift, and go to state 183


state 182

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE . int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 184
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 183

   25 func_block: BLOCK commands RETURN expr SEMICOLON KCOLB .

    $default  reduce using rule 25 (func_block)


state 184

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr . @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96

    $default  reduce using rule 38 (@3)

    @3  go to state 185


state 185

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 . int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 186
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 186

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr . GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96
    GE  shift, and go to state 187


state 187

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE . int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 188
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 188

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr . @4 int_expr EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96

    $default  reduce using rule 39 (@4)

    @4  go to state 189


state 189

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 . int_expr EQ int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 190
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 190

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr . EQ int_expr @5 int_expr NE int_expr

    LT  shift, and go to state 96
    EQ  shift, and go to state 191


state 191

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ . int_expr @5 int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 192
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 192

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr . @5 int_expr NE int_expr

    LT  shift, and go to state 96

    $default  reduce using rule 40 (@5)

    @5  go to state 193


state 193

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 . int_expr NE int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 194
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 194

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr . NE int_expr

    LT  shift, and go to state 96
    NE  shift, and go to state 195


state 195

   41 int_expr: int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE . int_expr

    NUMBER  shift, and go to state 27
    NAME    shift, and go to state 106
    OBRACE  shift, and go to state 107

    int_expr    go to state 196
    int_expr_1  go to state 32
    int_expr_2  go to state 33
    int_expr_3  go to state 34
    int_term    go to state 35
    int_factor  go to state 36


state 196

   41 int_expr: int_expr . LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr
   41         | int_expr LT int_expr @1 int_expr GT int_expr @2 int_expr LE int_expr @3 int_expr GE int_expr @4 int_expr EQ int_expr @5 int_expr NE int_expr .

    LT  shift, and go to state 96

    LT        [reduce using rule 41 (int_expr)]
    $default  reduce using rule 41 (int_expr)
